# 예제12: 인공위성의 스캐너가 실제로 
# 숲과 도시를 구별할 수 있는지를 통계적으로 검증한다. (p.387)

import numpy as np 
from scipy import stats 
import math

# 숲 지역의 스캐너 측정값 (샘플 1)
x = np.array([77, 77, 78, 78, 81, 81, 82, 82, 82, 82, 
              82, 83, 83, 84, 84, 84, 84, 85, 86, 86, 
              86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 
              89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 
              91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 
              93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 
              94, 94, 94, 94, 94, 94, 94, 94, 95, 95, 
              95, 95, 95, 96, 96, 96, 96, 96, 96, 97, 
              97, 97, 97, 97, 97, 97, 97, 97, 98, 99, 
              100, 100, 100, 100, 100, 100, 100, 100, 
              100, 101, 101, 101, 101, 101, 101, 102, 
              102, 102, 102, 102, 102, 103, 103, 104, 
              104, 104, 105, 107]) 

# 도시 지역의 스캐너 측정값 (샘플 2)
y = np.array([71, 72, 73, 74, 75, 77, 78, 79, 79, 79, 
              79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 
              82, 84, 84, 84, 84, 84, 84, 85, 85, 85, 
              85, 85, 85, 86, 86, 87, 88, 90, 91, 94])

# 표본 분산 계산 (ddof=1은 자유도 보정)
var1 = np.var(x, ddof=1); print(var1)
var2 = np.var(y, ddof=1); print(var2)

# 각 그룹의 표본 크기
n1 = len(x); print(n1)
n2 = len(y); print(n2)

# 두 표본 평균 차의 표준 오차 계산
se = math.sqrt(var1 / n1 + var2 / n2); print(se)

# 신뢰수준 95%에 해당하는 z-값 (표준 정규분포 기준)
z_alpha = stats.norm.ppf(1 - 0.05 / 2); print(z_alpha)

# 평균 차 신뢰구간 계산용 범위
interval_z = z_alpha * se; print(interval_z)

# 두 표본의 평균 계산
xbar1 = np.mean(x); print(xbar1)
xbar2 = np.mean(y); print(xbar2)

# 평균 차 계산
diff = xbar1 - xbar2; print(diff)

# 정규분포 기준 평균 차의 95% 신뢰구간
CI_1 = [diff - interval_z, diff + interval_z]; print(CI_1)

# 해석:
# 평균 차의 신뢰구간이 0을 포함하지 않음 
# → 두 지역 간 평균 차가 통계적으로 유의함
# → 스캐너가 도시와 숲을 구분하는 데 효과적일 수 있음


# ------------------------------------------------------
# 이제, 등분산을 가정한 t-분포 기반 신뢰구간 계산
# ------------------------------------------------------

# 두 표본의 분산을 통합 (pooled variance)
spooled = ((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2); print(spooled)

# 통합 분산 기준 표준오차
se_spooled = math.sqrt(spooled * (1 / n1 + 1 / n2)); print(se_spooled)

# 자유도 = n1 + n2 - 2 에 해당하는 t-값 (95% 신뢰수준)
t_alpha = stats.t.ppf(1 - 0.05 / 2, n1 + n2 - 2); print(t_alpha)

# t-분포 기반 신뢰구간 범위
interval_t = t_alpha * se_spooled; print(interval_t)

# t-분포 기준 평균 차의 95% 신뢰구간
CI_2 = [diff - interval_t, diff + interval_t]; print(CI_2)

# 해석:
# t-분포는 정규분포보다 분산이 더 크므로 신뢰구간이 더 넓게 계산됨
# 이는 표본 수가 적을수록 표본 평균의 불확실성을 더 크게 반영하기 때문임
